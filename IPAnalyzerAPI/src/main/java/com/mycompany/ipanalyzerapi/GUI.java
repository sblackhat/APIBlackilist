/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.ipanalyzerapi;

import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author sertv
 */
public class GUI extends javax.swing.JFrame {

    private static final String WIRESHARK = "Wireshark capture file";
    private static final String TXT = "Txt Files";
    private static final String INITPATH = System.getProperty("user.home") + "\\Desktop";
    private JFileChooser openFileChooser;
    private ReadCaptures rd;
    private RequestHandler rq;
    private WriteIPs wr;
    private boolean handleResult;
    private Output out;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initClasses();
    }

    private void initClasses() {
        rd = new ReadCaptures();
        rq = new RequestHandler();
        wr = new WriteIPs();
        out = new Output();
        out.initOutput();
    }

    private void initFileChooser(int option) {
        openFileChooser = new JFileChooser();
        openFileChooser.setCurrentDirectory(new File(INITPATH));

        switch (option) {
            case 1:
                openFileChooser.setDialogTitle("Select a text file capture");
                openFileChooser.setFileFilter(new FileNameExtensionFilter(TXT, "txt"));
                break;
            case 2:
                openFileChooser.setDialogTitle("Select a WireShark capture");
                openFileChooser.setFileFilter(new FileNameExtensionFilter(WIRESHARK, "pcapng"));
                break;
            case 3:
                openFileChooser.setDialogTitle("Specify a file to save");
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        WireSharkButton = new javax.swing.JButton();
        txtButton = new javax.swing.JToggleButton();
        saveButton = new javax.swing.JButton();
        bar = new javax.swing.JProgressBar();
        analyze = new javax.swing.JToggleButton();
        messageLabel = new javax.swing.JLabel();
        backGround = new javax.swing.JLabel();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Wireshark capture file (.pcapng)");
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IP Capture Analyzer");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(System.getProperty("user.dir")+"\\src\\files\\icon.png").getImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        WireSharkButton.setText("Wireshark capture file (.pcapng)");
        WireSharkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WireSharkButtonActionPerformed(evt);
            }
        });
        jPanel1.add(WireSharkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, -1, -1));

        txtButton.setText("Nomal text file (.txt)");
        txtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtButtonActionPerformed(evt);
            }
        });
        jPanel1.add(txtButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 159, -1));

        saveButton.setText("SAVE");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, -1, -1));

        bar.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, 340, 20));

        analyze.setText("Analyze!");
        analyze.setEnabled(false);
        analyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeActionPerformed(evt);
            }
        });
        jPanel1.add(analyze, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 90, -1));

        messageLabel.setBackground(new java.awt.Color(255, 255, 255));
        messageLabel.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 14)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(255, 255, 255));
        messageLabel.setAutoscrolls(true);
        messageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(messageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 540, 110));

        backGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/ipanalyzerapi/background.png"))); // NOI18N
        jPanel1.add(backGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 410));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 396));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void run() {
        File openedFile = null;
        boolean done = false;
        int returnValue = JFileChooser.APPROVE_OPTION;
        
        //Set the output progress bar to zero   
        out.setProgressBar(0);
            
        while (!done && returnValue == JFileChooser.APPROVE_OPTION) {
            returnValue = openFileChooser.showOpenDialog(this);

            openedFile = openFileChooser.getSelectedFile();

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                try {
                    //Check if the file exists and if it is a directory
                    if (openedFile.exists() && openedFile.isFile()) {
                        //Read the selected file    
                        out.setMessage("Reading the file...");
                        if (TXT.contentEquals(openFileChooser.getFileFilter().getDescription())) {
                            rd.readFile(openFileChooser.getSelectedFile());
                        } else if (WIRESHARK.contentEquals(openFileChooser.getFileFilter().getDescription())) {
                            out.setMessage("Executing the command...");
                            String output = ExecutePowerShell.command(openedFile.getAbsolutePath());
                            rd.readFile(output);
                        }
                        done = true;
                        //Set the progress bar value
                        out.addProgressBar(5);
                        //Show the message on the screen
                        out.setMessage("Capture successfully loaded!");
                        //Set on the switch button
                        analyze.setEnabled(done);
                    }

                } catch (Exception e) {
                    out.setMessage("Failed to load image file!");
                }
            } else {
                out.setMessage("No file choosen!");
            }
        }
        bar.setValue(0);

    }

    private void txtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtButtonActionPerformed
        initFileChooser(1);
        run();
    }//GEN-LAST:event_txtButtonActionPerformed

    private void WireSharkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WireSharkButtonActionPerformed
        initFileChooser(2);
        run();
    }//GEN-LAST:event_WireSharkButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        //Write the request
        initFileChooser(3);
        //set the report
        String path = null;
        File save = null;

        wr.setMalicious(rq.getMalicious());
        //Set the path where the report is going to be written
        do {
            int returnValue = openFileChooser.showSaveDialog(this);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                //Show the message
                save = openFileChooser.getSelectedFile();

                path = save.getAbsolutePath();
            } else {
                messageLabel.setText("Cancel button pressed!");
            }
        } while (save != null && save.isDirectory());
        wr.setPath(path);
        //Write the report
        wr.write();
        //Add the progress bar
        out.setProgressBar(100);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void analyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeActionPerformed
        //Set the ips in the handler
        rq.setIps(rd.getIps());
        out.addProgressBar(5);
        try {
            //Handle the request
            handleResult = rq.handle(out);
        } catch (Exception ex) {
            out.addMessage("\nError while handling the request");
        }
        out.setProgressBar(85);
        if (handleResult) {
            out.addMessage("Malicious ips in the capture were found");
            saveButton.setEnabled(true);
        } else {
            out.addMessage("No malicious ip was found in the capture");
            out.setProgressBar(100);
        }
    }//GEN-LAST:event_analyzeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton WireSharkButton;
    private javax.swing.JToggleButton analyze;
    private javax.swing.JLabel backGround;
    private javax.swing.JProgressBar bar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JToggleButton txtButton;
    // End of variables declaration//GEN-END:variables

    class Output {

        private javax.swing.JLabel m;
        private javax.swing.JProgressBar b;
        private javax.swing.JScrollPane t;

        private JLabel getMessageLabel() {
            return m;
        }

        private JProgressBar getBar() {
            return b;
        }

        private void setMessageLabel(JLabel messageLabel) {
            this.m = messageLabel;
        }

        private void setBar(JProgressBar bar) {
            this.b = bar;
        }

        void addProgressBar(int n) {
            b.setValue(b.getValue() + n);
        }

        void setProgressBar(int n) {
            b.setValue(n);
        }

        void setMessage(String s) {
            m.setText(s);
        }

        void addMessage(String s) {
            m.setText(messageLabel.getText());
        }

        String getMessage() {
            return m.getText();
        }

        int getProgres() {
            return b.getValue();
        }

        Output() {

        }

        void initOutput() {
            this.setBar(bar);
            this.setMessageLabel(messageLabel);
        }
    }
}
